AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a lambda handler capable of pushing new s1 orbit data to the OpenData bucket every 11 minutes.

Parameters:
  BucketName:
    Type: String

  CdseUsername:
    Type: String
    NoEcho: true

  CdsePassword:
    Type: String
    NoEcho: true

  FetcherRoleName:
    Type: String

Resources:
  Secret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub "${AWS::StackName} CDSE credentials"
      SecretString: !Sub '{"username": "${CdseUsername}", "password": "${CdsePassword}"}'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Lambda}"
      RetentionInDays: 90

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      ManagedPolicyArns:
        - !Ref Policy
      RoleName: !Ref FetcherRoleName

  Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource: !Ref Secret
          - Effect: Allow
            Action: s3:ListBucket
            Resource: !Sub "arn:aws:s3:::${BucketName}"
          - Effect: Allow
            Action: s3:PutObject
            Resource: !Sub "arn:aws:s3:::${BucketName}/*"

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          SECRET_ARN: !Ref Secret
      Code: src/
      Handler: fetcher.lambda_handler
      MemorySize: 128
      Role: !GetAtt Role.Arn
      Runtime: python3.12
      Timeout: 600

  EventInvokeConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref Lambda
      Qualifier: $LATEST
      MaximumRetryAttempts: 0

  Schedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "rate(11 minutes)"
      Targets:
        - Arn: !GetAtt Lambda.Arn
          Id: AUX_POEORB
          Input: '{"orbit_type": "AUX_POEORB"}'
        - Arn: !GetAtt Lambda.Arn
          Id: AUX_RESORB
          Input: '{"orbit_type": "AUX_RESORB"}'

  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt Schedule.Arn
